NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=
MAIL_PASSWORD=
FROM_EMAIL=
MAIL_HOST="smtp.gmail.com"
MAIL_PORT=587

'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Menu, X, Download, Moon, Sun } from 'lucide-react';
import { cn } from '@/lib/utils';
import { MAIN_NAVIGATION, SITE_NAME } from '@/lib/constants';
import { FadeIn } from './ui/motion';
import { motion } from 'framer-motion';
import { buttonHover } from '@/lib/animations';
import { useTheme } from 'next-themes';

const Navbar = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const toggleMenu = () => setIsOpen(!isOpen);

  if (!mounted) {
    return null;
  }

  return (
    <header 
      className={cn(
        'fixed top-0 left-0 right-0 z-50 transition-all duration-300',
        isScrolled ? 'bg-background/95 shadow-sm backdrop-blur-sm' : 'bg-transparent'
      )}
    >
      <div className="container-custom">
        <div className="flex items-center justify-between py-4">
          {/* Logo */}
          <Link href="/" className="flex items-center">
            <Image
              src="/ChatGPT Image Jun 1, 2025, 02_29_02 PM.png"
              alt="Wrashpay Logo"
              width={150}
              height={40}
              className={cn(
                "h-10 w-auto transition-opacity duration-300",
                theme === 'dark' ? 'invert' : 'invert-0'
              )}
            />
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-8">
            {MAIN_NAVIGATION.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={cn(
                  'text-foreground hover:text-primary transition-colors',
                  'relative py-1 after:absolute after:bottom-0 after:left-0 after:h-0.5',
                  'after:w-0 after:bg-primary after:transition-all after:duration-300',
                  'hover:after:w-full'
                )}
              >
                {item.name}
              </Link>
            ))}
          </nav>

          {/* Theme Toggle and Download Button - Desktop */}
          <div className="hidden md:flex items-center space-x-4">
            <button
              onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
              className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
            >
              {theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </button>
            <motion.a
              href="#"
              whileHover={buttonHover}
              className="btn-primary flex items-center space-x-2"
            >
              <Download size={18} />
              <span>Download App</span>
            </motion.a>
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center space-x-2">
            <button
              onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
              className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
            >
              {theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </button>
            <button
              className="p-2 focus:outline-none"
              onClick={toggleMenu}
              aria-label={isOpen ? 'Close menu' : 'Open menu'}
            >
              {isOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {isOpen && (
        <FadeIn 
          className="md:hidden bg-background border-t py-4"
          duration={0.3}
        >
          <div className="container-custom">
            <nav className="flex flex-col space-y-4">
              {MAIN_NAVIGATION.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="text-foreground hover:text-primary py-2 transition-colors"
                  onClick={() => setIsOpen(false)}
                >
                  {item.name}
                </Link>
              ))}
              <motion.a
                href="#"
                whileHover={buttonHover}
                className="btn-primary flex items-center justify-center space-x-2 w-full mt-4"
              >
                <Download size={18} />
                <span>Download App</span>
              </motion.a>
            </nav>
          </div>
        </FadeIn>
      )}
    </header>
  );
};

export default Navbar;